{#
    @var string gallery_container_class
    @var string gallery_class
    @var string image_filter
    @var array images where key is name (facultative) and value is path or internale "name"
#}

{% block images_gallery %}
    {% set gallery_id = page.uniqueGalleryId|default(random(10, 1000)) %}
    {% set grid_cols = grid_cols|default(images|length < 5 ? images|length : (images|length is odd ? 3 : 4)) %}

        <div class="{{ gallery_container_class|default('my-3') }}">{# w-screen relative left-1/2 right-1/2 mr-[-50vw] ml-[-50vw] #}
            <ul class="{{ gallery_class|default('grid sm:grid-cols-' ~ grid_cols ~ ' gap-1 md:gap-3 list-none unprose max-w-screen-2xl mx-auto') }}">
                {# sm:grid-cols-2 sm:grid-cols-3 sm:grid-cols-4 #}
                {% for name, image in images %}
                    {{ gallery_li_opener|default('<li>')|raw }}
                        {% set current_media = media_from_string(image, name) %}
                        {% set galleryPart = _self.gallery_part(
                            current_media,
                            gallery_id,
                            page ?? null,
                            image_filter|default('thumb'),
                            image_container ?? '',
                            image_otherAttributes ?? {}
                        ) %}
                        {{ ((loop.index == 1 and (pos ?? 100) < 3)
                            ? galleryPart|replace({'loading="lazy"': '', 'loading=lazy': ''})
                            : galleryPart
                        )|raw }}
                    </li>
                {% endfor %}
            </ul>
        </div>
{% endblock %}

{% macro gallery_part(image, gallery_id, page = null, default_filter = 'xs', image_container = null, image_otherAttributes = {}) %}
    {% import view('/component/image_helper.html.twig') as helper %}
    {% import view('/component/image_inline.html.twig') as image_inline %}

    {% set image_html = default_filter == 'thumb'
            ? helper.thumb(image, page, default_filter, image_otherAttributes)
            : image_inline.renderImage(image, image_otherAttributes.class|default(null))
    %}
    {% if image_container is same as('') %}{% else %}<div class="{{ image_container|default('mx-auto max-w-[330px]') }}">{% endif %}
    {{ link(image_html,
        image|image('default'),
        {
            'data-fslightbox': gallery_id,
            dwl: image|image('default', 'webp')
        }) }}
     {% if image_container is same as('') %}{% else %}</div>{% endif %}
{% endmacro %}
